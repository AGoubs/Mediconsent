{"version":3,"sources":["Demo/Questions/Question.js","Demo/Questions/Questions.js"],"names":["Question","React","Component","state","libelle_question","checkbox","message_validation","message_erreur","libelle","createRef","handleSubmit","event","preventDefault","axios","put","id_question","this","props","id","current","value","then","res","setState","catch","error","render","Row","Col","Card","Header","Title","as","Body","md","onSubmit","Form","Group","controlId","Label","Control","rows","required","defaultValue","title","ref","Button","variant","type","className","Questions","questions","componentDidMount","location","detail","history","push","pathname","elements","map","question","index","key","checked","withRouter"],"mappings":"2MAKA,MAAMA,UAAiBC,IAAMC,UAAW,eAAD,oBAEnCC,MAAQ,CACJC,iBAAkB,GAClBC,UAAU,EACVC,mBAAoB,GACpBC,eAAgB,IANe,KASnCC,QAAUP,IAAMQ,YATmB,KAWnCC,aAAeC,IACXA,EAAMC,iBACNC,IAAMC,IAAN,6DACA,CACIC,YAAaC,KAAKC,MAAMC,GACxBd,iBAAkBY,KAAKR,QAAQW,QAAQC,QAEtCC,KAAKC,IACFN,KAAKO,SAAS,CAACjB,mBAAoB,2CAEtCkB,MAAMC,IACHT,KAAKO,SAAS,CAAChB,eAAgB,iCAI3CmB,SACI,OACI,kBAAC,IAAD,KACI,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACI,kBAACA,EAAA,EAAKC,OAAN,KACI,kBAACD,EAAA,EAAKE,MAAN,CAAYC,GAAG,MAAf,kBAAiChB,KAAKC,MAAMC,KAEhD,kBAACW,EAAA,EAAKI,KAAN,KACI,kBAACN,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAKM,GAAI,IACL,0BAAMC,SAAUnB,KAAKN,cACjB,kBAAC0B,EAAA,EAAKC,MAAN,CAAYC,UAAWtB,KAAKC,MAAMC,IAC9B,kBAACkB,EAAA,EAAKG,MAAN,iBACA,kBAACH,EAAA,EAAKI,QAAN,CAAcR,GAAG,WAAWS,KAAK,IAAIC,UAAQ,EAACC,aAAc3B,KAAKC,MAAM2B,MACnEC,IAAK7B,KAAKR,WAGlB,kBAACsC,EAAA,EAAD,CAAQC,QAAQ,UAAUC,KAAK,UAA/B,gBAIJ,yBAAKC,UAAU,gBAAgBjC,KAAKb,MAAMG,oBAC1C,yBAAK2C,UAAU,eAAejC,KAAKb,MAAMI,wBAYlEP,Q,SC9Df,MAAMkD,UAAkBjD,IAAMC,UAAW,eAAD,oBACpCC,MAAQ,CACJgD,UAAW,IAGfC,oBACQpC,KAAKC,MAAMoC,SAASlD,MACpBa,KAAKO,SAAS,CAAE4B,UAAWnC,KAAKC,MAAMoC,SAASlD,MAAMmD,SAGrDtC,KAAKC,MAAMsC,QAAQC,KAAK,CAAEC,SAAU,WAK5C/B,SACI,MAAMgC,EAAW1C,KAAKb,MAAMgD,UAAUQ,IAAI,CAACC,EAAUC,IACjD,kBAAC,EAAD,CAAUC,IAAKD,EAAO3C,GAAI0C,EAAS7C,YAAa6B,MAAOgB,EAASxD,iBAAkB2D,QAASH,EAASvD,YAExG,OACI,6BAAMqD,IAKHM,sBAAWd","file":"static/js/14.b9223a2a.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Row, Col, Card, Form, Button } from 'react-bootstrap';\r\nimport Aux from \"../../hoc/_Aux\";\r\nimport axios from 'axios';\r\n\r\nclass Question extends React.Component {\r\n\r\n    state = {\r\n        libelle_question: '',\r\n        checkbox: false,\r\n        message_validation: '',\r\n        message_erreur: ''\r\n    };\r\n\r\n    libelle = React.createRef();\r\n\r\n    handleSubmit = event => {\r\n        event.preventDefault();\r\n        axios.put(`http://194.183.220.233:9095/Mediconsent/rest/question/save`, \r\n        {\r\n            id_question: this.props.id,\r\n            libelle_question: this.libelle.current.value\r\n        })\r\n            .then(res => {\r\n                this.setState({message_validation: \"Valeur enregistrée avec succès\"})\r\n            })\r\n            .catch(error => {\r\n                this.setState({message_erreur: \"Echec de l'enregistrement\"})\r\n            });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Aux>\r\n                <Row>\r\n                    <Col>\r\n                        <Card>\r\n                            <Card.Header>\r\n                                <Card.Title as=\"h5\">Question N° {this.props.id}</Card.Title>\r\n                            </Card.Header>\r\n                            <Card.Body>\r\n                                <Row>\r\n                                    <Col md={12}>\r\n                                        <form onSubmit={this.handleSubmit}>\r\n                                            <Form.Group controlId={this.props.id}>\r\n                                                <Form.Label>Question</Form.Label>\r\n                                                <Form.Control as=\"textarea\" rows=\"2\" required defaultValue={this.props.title}\r\n                                                    ref={this.libelle}\r\n                                                />\r\n                                            </Form.Group>\r\n                                            <Button variant=\"primary\" type=\"submit\">\r\n                                                Enregistrer\r\n                                            </Button>\r\n                                        </form>\r\n                                        <div className=\"text-success\">{this.state.message_validation}</div>\r\n                                        <div className=\"text-danger\">{this.state.message_erreur}</div>\r\n                                    </Col>\r\n                                </Row>\r\n                            </Card.Body>\r\n                        </Card>\r\n                    </Col>\r\n                </Row>\r\n            </Aux>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Question;\r\n","import React from 'react';\r\nimport Question from \"./Question.js\"\r\nimport axios from 'axios';\r\nimport { withRouter } from \"react-router-dom\";\r\n\r\nclass Questions extends React.Component {\r\n    state = {\r\n        questions: []\r\n    }\r\n\r\n    componentDidMount() {\r\n        if (this.props.location.state) {\r\n            this.setState({ questions: this.props.location.state.detail });\r\n        }\r\n        else {\r\n            this.props.history.push({ pathname: '/forms' })\r\n        }\r\n    }\r\n\r\n\r\n    render() {\r\n        const elements = this.state.questions.map((question, index) =>\r\n            <Question key={index} id={question.id_question} title={question.libelle_question} checked={question.checkbox} />\r\n        )\r\n        return (\r\n            <div>{elements}</div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withRouter(Questions);\r\n"],"sourceRoot":""}